{"version":3,"sources":["components/Heading.jsx","components/NoteTakingForm.jsx","components/Note.jsx","components/NotesList.jsx","App.js","serviceWorker.js","index.js"],"names":["Heading","className","style","marginTop","NoteTakingForm","props","value","handleChange","addNote","onSubmit","type","placeholder","onChange","required","maxLength","Note","id","children","deleteNote","class","float","onClick","NotesList","notes","marginBottom","map","note","key","App","state","db","bind","e","this","setState","target","preventDefault","newNote","length","transaction","add","catch","err","console","log","delete","newList","filter","notesDB","Dexie","version","stores","a","toArray","allNotes","marginLeft","marginRight","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.409973d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = () => {\r\n    return <p className=\"title is-1\" style={{marginTop: \"1em\"}}>NoteTaker</p>;\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst NoteTakingForm = props => {\r\n    const { \r\n        value, \r\n        handleChange, \r\n        addNote \r\n    } = props;\r\n\r\n    return (\r\n        <form onSubmit={addNote} style={{marginTop: \"2.5em\"}}>\r\n            <div className=\"control\">\r\n                <input \r\n                    className=\"input\"\r\n                    type=\"text\" \r\n                    value={value} \r\n                    placeholder=\"Enter note...\"\r\n                    onChange={handleChange}\r\n                    required\r\n                    maxLength=\"22\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button \r\n                    type=\"submit\"\r\n                    className=\"button is-fullwidth is-success\"\r\n                >\r\n                    Add To Notes\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NoteTakingForm;","import React from 'react';\r\n\r\nconst Note = props => {\r\n    const { \r\n        id,\r\n        children,\r\n        deleteNote \r\n    } = props;\r\n\r\n    return (\r\n        <span \r\n            className=\"list-item\"\r\n        >\r\n            {children}\r\n            <a>\r\n            <span \r\n                class=\"icon is-small has-text-danger\" \r\n                style={{float: \"right\", marginTop: \"0.3em\"}}\r\n                onClick={() => deleteNote(id)}\r\n            >\r\n                <i class=\"fas fa-times-circle\"></i>\r\n            </span>\r\n            </a>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nimport Note from './Note';\r\n\r\nconst NotesList = props => {\r\n    const { \r\n        notes,\r\n        deleteNote \r\n    } = props;\r\n\r\n    return (\r\n        <div \r\n            className=\"list\" \r\n            style={{marginTop: \"2.5em\", marginBottom: \"2.5em\"}}\r\n        >{\r\n            notes.map(note => {\r\n                return (\r\n                    <Note \r\n                        key={note.id} \r\n                        id={note.id}\r\n                        deleteNote={deleteNote}\r\n                    >\r\n                        {note.value}\r\n                    </Note>\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotesList;","// Library imports\nimport React, { Component } from 'react';\nimport Dexie from 'dexie';\n\n// Component imports\nimport Heading from './components/Heading';\nimport NoteTakingForm from './components/NoteTakingForm';\nimport NotesList from './components/NotesList';\n\n// Style imports\nimport 'bulma/css/bulma.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      db: null,\n      value: '',\n      notes: []\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addNote = this.addNote.bind(this);\n    this.deleteNote = this.deleteNote.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  addNote(e) {\n    e.preventDefault();\n\n    const { \n      db, \n      notes, \n      value \n    } = this.state;\n\n    // Create a new note from the user-submitted text.\n    const newNote = {id: notes.length + 1, value};\n    \n    /**\n     * Attempt to insert the new note into the notes store.\n     * If successful, add the new note to the notes state\n     * prop, and blank out the input field as well.\n     */\n    db\n      .transaction('rw', db.notes, () => {\n        db.notes.add(newNote);\n\n        this.setState({notes: [...notes, newNote]});\n        this.setState({value: ''});\n      })\n      .catch(err => console.log(err));  \n  }\n\n  /**\n   * deleteNote takes in an id of a note item, then:\n   * 1. Deletes the note record of that id in the 'notes' store.\n   * 2. Updates the 'notes' state prop with the new list after\n   *    removing the note of that id.\n   */\n  deleteNote(id) {\n    const { \n      db,\n      notes\n    } = this.state;\n\n    db\n      .transaction('rw', db.notes, () => {\n        db.notes.delete(id);\n\n        const newList = [...notes].filter(note => note.id !== id);\n        this.setState({notes: newList});\n      })\n      .catch(err => console.log(err));\n  }\n\n  componentDidMount() {\n    /**\n     * Create and open a new database of name 'notes'.\n     * If already exists, dexie simply opens the \n     * existing database.\n     */\n    const notesDB = new Dexie('notes');\n    \n    /**\n     * Store the reference to the database in\n     * state.\n     * \n     * Upon the setState on db resolving, \n     * 1. Define the schema for the notes database.\n     * 2. Get the list of notes from the notes store\n     *    and set it to the notes state prop.\n     */\n    this.setState({db: notesDB}, () => {\n      this.state.db.version(1).stores({\n        notes: 'id'\n      });\n\n      (async () => {\n        const allNotes = await this.state.db.notes.toArray();\n        this.setState({notes: allNotes});\n      })();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\" style={{marginLeft: \"2em\", marginRight: \"2em\"}}>\n        <div className=\"has-text-centered\">\n          <div className=\"columns\">\n            <div className=\"column\"></div>\n            <div className=\"column\">\n              <Heading />\n              <NoteTakingForm \n                value={this.state.value}\n                handleChange={this.handleChange}\n                addNote={this.addNote}\n              />\n              {this.state.notes.length > 0 ?\n                <NotesList \n                  notes={this.state.notes}\n                  deleteNote={this.deleteNote}\n                /> \n                :\n                <div style={{marginTop: \"2.5em\"}}>Start adding notes!</div>\n              }\n            </div>\n            <div className=\"column\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// For development, to remove.\nif (module.hot) module.hot.accept();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}