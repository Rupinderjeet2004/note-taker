{"version":3,"sources":["components/Heading.jsx","components/NoteTakingForm.jsx","components/Note.jsx","components/NotesList.jsx","App.js","serviceWorker.js","index.js"],"names":["Heading","className","style","marginTop","NoteTakingForm","props","value","handleChange","addNote","onSubmit","type","placeholder","onChange","required","maxLength","Note","id","children","deleteNote","class","float","onClick","NotesList","notes","marginBottom","map","note","key","App","state","db","bind","e","this","setState","target","toLowerCase","preventDefault","newNote","length","transaction","add","catch","err","console","log","delete","newList","filter","notesDB","Dexie","version","stores","a","toArray","allNotes","marginLeft","marginRight","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a66be0dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Heading = () => {\r\n    return <p className=\"title is-1\" style={{marginTop: \"1em\"}}>NoteTaker</p>;\r\n}\r\n\r\nexport default Heading;","import React from 'react';\r\n\r\nconst NoteTakingForm = props => {\r\n    const { \r\n        value, \r\n        handleChange, \r\n        addNote \r\n    } = props;\r\n\r\n    return (\r\n        <form onSubmit={addNote} style={{marginTop: \"2.5em\"}}>\r\n            <div className=\"control\">\r\n                <input \r\n                    className=\"input\"\r\n                    type=\"text\" \r\n                    value={value} \r\n                    placeholder=\"Add note...\"\r\n                    onChange={handleChange}\r\n                    required\r\n                    maxLength=\"25\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <button \r\n                    type=\"submit\"\r\n                    className=\"button is-fullwidth is-success\"\r\n                >\r\n                    Add To Notes\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NoteTakingForm;","import React from 'react';\r\n\r\nconst Note = props => {\r\n    const { \r\n        id,\r\n        children,\r\n        deleteNote \r\n    } = props;\r\n\r\n    return (\r\n        <span \r\n            className=\"list-item\"\r\n        >\r\n            {children}\r\n            <a>\r\n            <span \r\n                class=\"icon is-small has-text-danger\" \r\n                style={{float: \"right\", marginTop: \"0.3em\"}}\r\n                onClick={() => deleteNote(id)}\r\n            >\r\n                <i class=\"fas fa-times-circle\"></i>\r\n            </span>\r\n            </a>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport default Note;","import React from 'react';\r\n\r\nimport Note from './Note';\r\n\r\nconst NotesList = props => {\r\n    const { \r\n        notes,\r\n        deleteNote \r\n    } = props;\r\n\r\n    return (\r\n        <div \r\n            className=\"list\" \r\n            style={{marginTop: \"2.5em\", marginBottom: \"2.5em\"}}\r\n        >{\r\n            notes.map(note => {\r\n                return (\r\n                    <Note \r\n                        key={note.id} \r\n                        id={note.id}\r\n                        deleteNote={deleteNote}\r\n                    >\r\n                        {note.value}\r\n                    </Note>\r\n                );\r\n            })\r\n        }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotesList;","// Library imports\r\nimport React, { Component } from 'react';\r\nimport Dexie from 'dexie';\r\n\r\n// Component imports\r\nimport Heading from './components/Heading';\r\nimport NoteTakingForm from './components/NoteTakingForm';\r\nimport NotesList from './components/NotesList';\r\n\r\n// Style imports\r\nimport 'bulma/css/bulma.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      db: null,\r\n      value: '',\r\n      notes: []\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.addNote = this.addNote.bind(this);\r\n    this.deleteNote = this.deleteNote.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({value: (e.target.value).toLowerCase()});\r\n  }\r\n\r\n  addNote(e) {\r\n    e.preventDefault();\r\n\r\n    const { \r\n      db, \r\n      notes, \r\n      value \r\n    } = this.state;\r\n\r\n    // Create a new note from the user-submitted text.\r\n    const newNote = {id: notes.length + 1, value};\r\n    \r\n    /**\r\n     * Attempt to insert the new note into the notes store.\r\n     * If successful, add the new note to the notes state\r\n     * prop, and blank out the input field as well.\r\n     */\r\n    db\r\n      .transaction('rw', db.notes, () => {\r\n        db.notes.add(newNote);\r\n\r\n        this.setState({notes: [...notes, newNote]});\r\n        this.setState({value: ''});\r\n      })\r\n      .catch(err => console.log(err));  \r\n  }\r\n\r\n  /**\r\n   * deleteNote takes in an id of a note item, then:\r\n   * 1. Deletes the note record of that id in the 'notes' store.\r\n   * 2. Updates the 'notes' state prop with the new list after\r\n   *    removing the note of that id.\r\n   */\r\n  deleteNote(id) {\r\n    const { \r\n      db,\r\n      notes\r\n    } = this.state;\r\n\r\n    db\r\n      .transaction('rw', db.notes, () => {\r\n        db.notes.delete(id);\r\n\r\n        const newList = [...notes].filter(note => note.id !== id);\r\n        this.setState({notes: newList});\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  componentDidMount() {\r\n    /**\r\n     * Create and open a new database of name 'notes'.\r\n     * If already exists, dexie simply opens the \r\n     * existing database.\r\n     */\r\n    const notesDB = new Dexie('notes');\r\n    \r\n    /**\r\n     * Store the reference to the database in\r\n     * state.\r\n     * \r\n     * Upon the setState on db resolving, \r\n     * 1. Define the schema for the notes database.\r\n     * 2. Get the list of notes from the notes store\r\n     *    and set it to the notes state prop.\r\n     */\r\n    this.setState({db: notesDB}, () => {\r\n      this.state.db.version(1).stores({\r\n        notes: 'id'\r\n      });\r\n\r\n      (async () => {\r\n        const allNotes = await this.state.db.notes.toArray();\r\n        this.setState({notes: allNotes});\r\n      })();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div \r\n          className=\"has-text-centered\" \r\n          style={{marginLeft: \"2em\", marginRight: \"2em\"}}\r\n        >\r\n          <div className=\"columns\">\r\n            <div className=\"column\"></div>\r\n            <div className=\"column\">\r\n              <Heading />\r\n              <NoteTakingForm \r\n                value={this.state.value}\r\n                handleChange={this.handleChange}\r\n                addNote={this.addNote}\r\n              />\r\n              {this.state.notes.length > 0 ?\r\n                <NotesList \r\n                  notes={this.state.notes}\r\n                  deleteNote={this.deleteNote}\r\n                /> \r\n                :\r\n                <div style={{marginTop: \"2.5em\"}}>Start adding notes!</div>\r\n              }\r\n            </div>\r\n            <div className=\"column\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// For development, to remove.\r\nif (module.hot) module.hot.accept();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}